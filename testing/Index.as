import jp.progression.commands.FuncCommand;import jp.progression.Progression;import jp.progression.commands.AddChild;import jp.progression.commands.RemoveChild;import jp.progression.commands.Trace;import jp.progression.core.SceneId;import jp.progression.scenes.proto.SceneObject;import spark.display.DisplayObjectContainer;import spark.display.LibraryClip;import spark.display.StageObject;/** * @author makoto */class Index extends MovieClip{	private var _prog:Progression;		public function Index()	{		Progression.verbose = true;		var stageObject:StageObject = StageObject.create(this, new DisplayObjectContainer(this));				var prog:Progression = _prog = new Progression("index", stageObject);		//		var square:CastMovieClip = new CastMovieClip("square");//		square.onCastAdded = function() {//			this.addCommand(//				new Trace("square の onCastAdded を処理します。")//			);//		};//		square.onCastRemoved = function() {//			this.addCommand(//				new Trace("square の onCastRemoved を処理します。")//			);//		};				var indexPage:LibraryClip = new LibraryClip("IndexPage");		indexPage.x = 100;		indexPage.alpha = 50;				var aboutPage:LibraryClip = new LibraryClip("AboutPage");				var contactPage:LibraryClip = new LibraryClip("ContactPage");		contactPage.y = 100;		contactPage.scaleX = 50;				var root:SceneObject = _prog.root;		root.onLoad = function() {			this.addCommand(				new Trace("root の onLoad を処理します。")			);		};		root.onInit = function() {			this.addCommand(				new Trace("root の onInit を処理します。"),				new AddChild(prog.container, indexPage)			);		};		root.onUnLoad = function() {			this.addCommand(				new Trace("root の onUnLoad を処理します。")			);		};		root.onGoto = function() {			this.addCommand(				new Trace("root の onGoto を処理します。"),				new RemoveChild(prog.container, indexPage)			);		};		root.onDescend = function() {			this.addCommand(				new Trace("root の onDescend を処理します。")			);		};		root.onAscend = function() {			this.addCommand(				new Trace("root の onAscend を処理します。")			);		};				// about シーンの追加		var about:SceneObject = root.addScene(new SceneObject("about"));		about.onLoad = function() {			this.addCommand(				new Trace("about の onLoad を処理します。")			);		};		about.onInit = function() {			this.addCommand(				new Trace("about の onInit を処理します。"),				new AddChild(prog.container, aboutPage),				new FuncCommand(function():Void {					// trace が出力されれば OK					aboutPage.test();				})			);		};		about.onUnLoad = function() {			this.addCommand(				new Trace("about の onUnload を処理します。")			);		};		about.onGoto = function() {			this.addCommand(				new Trace("about の onGoto を処理します。"),				new RemoveChild(prog.container, aboutPage)			);		};		about.onDescend = function() {			this.addCommand(				new Trace("about の onDescend を処理します。")			);		};		about.onAscend = function() {			this.addCommand(				new Trace("about の onAscend を処理します。")			);		};				// about の map シーン追加		var map:SceneObject = about.addScene(new SceneObject("map"));		map.onLoad = function() {			this.addCommand(				new Trace("map の onLoad を処理します。")			);		};		map.onInit = function() {			this.addCommand(				new Trace("map の onInit を処理します。"),				new AddChild(prog.container, contactPage)			);		};		map.onUnLoad = function() {			this.addCommand(				new Trace("map の onInit を処理します。")			);		};		map.onGoto = function() {			this.addCommand(				new Trace("map の onGoto を処理します。"),				new RemoveChild(prog.container, contactPage)			);		};		map.onDescend = function() {			this.addCommand(				new Trace("map の onDescend を処理します。")			);		};		map.onAscend = function() {			this.addCommand(				new Trace("map の onAscend を処理します。")			);		};						// contact シーンの追加		var contact:SceneObject = root.addScene(new SceneObject("contact"));		contact.onLoad = function() {			this.addCommand(				new Trace("contact の onLoad を処理します。")			);		};		contact.onInit = function() {			this.addCommand(				new Trace("contact の onInit を処理します。"),				new AddChild(prog.container, contactPage)			);		};		contact.onUnLoad = function() {			this.addCommand(				new Trace("contact の onInit を処理します。")			);		};		contact.onGoto = function() {			this.addCommand(				new Trace("contact の onGoto を処理します。"),				new RemoveChild(prog.container, contactPage)			);		};		contact.onDescend = function() {			this.addCommand(				new Trace("contact の onDescend を処理します。")			);		};		contact.onAscend = function() {			this.addCommand(				new Trace("contact の onAscend を処理します。")			);		};				// about シーンへ移動//		_prog.goto(new SceneId("/index/about"));		_prog.goto(new SceneId("/index"));	}		static public function main(target:MovieClip) : Void	{		target.__proto__ = Index.prototype;		Function(Index).apply(target, null);	}}