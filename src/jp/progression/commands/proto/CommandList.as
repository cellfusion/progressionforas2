import mx.utils.Delegate;import jp.progression.Progression;import jp.progression.commands.proto.Command;import jp.progression.events.CommandCatchEvent;import jp.progression.events.CommandEvent;/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */class jp.progression.commands.proto.CommandList extends Command{	public function get commands():Array { return getCommands().concat(); }	private function getCommands():Array { return _commands; }	private function setCommands(value:Array):Void { _commands = value; }	private var _commands:Array;		public function get length():Number	{		return commands.length;	}	private var _catchList:Object;		private var _finallyCommand:Command;		private var _commandEvent:CommandEvent;		private var _completeDelegate:Function;	private var _catchDelegate:Function;	private var _finallyCompleteDelegate:Function;		public function CommandList(name:String, delay:Number, commands:Array)	{		super(name, delay == undefined ? 0 : delay);		if (delay == undefined) delay = 0;		if (commands == undefined) commands = null;				// 初期化する		_commands = new Array();		_catchList = new Object();				 // コマンドを追加する		 var l:Number = commands.length;		 for (var i:Number = 0; i < l; i++) addCommand(commands[i]);		 		 _completeDelegate = Delegate.create(this, _completeHandler);		 _catchDelegate = Delegate.create(this, _catchHandler);		 _finallyCompleteDelegate = Delegate.create(this , _finallyCompleteHandler);	}		private function _executeCatch(e:CommandCatchEvent):Void	{		Progression.log(" "+name+"コマンドが "+e.type+" イベントをキャプチャしました。");				// コマンドを取得する		var com:Command = Command(_catchList[e.related]);				// コマンドが存在すれば実行		if (com)		{			_commandEvent = e;			com.addEventListener(CommandEvent.COMMAND_COMPLETE, _completeDelegate);			com.addEventListener(CommandCatchEvent.EXCEPTION, _catchDelegate);			com.addEventListener(CommandCatchEvent.EVENT,  _catchDelegate);			com.execute(extra);			return;		}				// イベントを発行		_executeFinally(e);	}		private function _executeFinally(e:CommandEvent):Void	{		// コマンドが存在すれば実行する		if (_finallyCommand)		{			Progression.log(" "+name+" コマンドの finally 処理を実行します。");						// イベントオブジェクト保存する			_commandEvent = e;						_finallyCommand.addEventListener(CommandEvent.COMMAND_COMPLETE, _finallyCompleteDelegate);			_finallyCommand.addEventListener(CommandCatchEvent.EXCEPTION, _catchDelegate);			_finallyCommand.addEventListener(CommandCatchEvent.COMMAND_COMPLETE, _catchDelegate);			_finallyCommand.execute(extra);			return;		}				// イベントを発行		_executeFinallyComplete(e);			}		private function _executeFinallyComplete(e:CommandEvent):Void	{		// 事後処理を実行する		if (_afterFunc instanceof Function) _afterFunc.apply(this, _afterArgs ? _afterArgs : null);				// イベントを発行		dispatchEvent(e);	}		public function addCommand(command:Command):CommandList	{		// 関連性を設定する		command.setParent(this);		command.setDepth(getDepth()+1);				// リストに追加する		_commands.push(command);				return this;	}		public function catchException(exception:Object, command:Command):CommandList	{		// データを設定する		_catchList[exception] = command;		_catchList[command] = exception;		return this;	}		public function catchEvent(eventType:String, command:Command):CommandList	{		// データを設定する		_catchList[eventType] = command;		_catchList[command] = eventType;		return this;	}		public function setFinally(command:Command):CommandList	{		_finallyCommand = command;		return this;	}		public function interrupt():Void	{		// 終了する		super.interrupt();	}		public function clone():Command	{		var com:CommandList = new CommandList(name, delay);		com.enabled = enabled;		com.before(_beforeScope, _beforeFunc, _beforeArgs);		com.after(_afterScope, _afterFunc, _afterArgs);				// コマンドリストを複製する		var l:Number = commands.length;		for (var i:Number = 0; i < l; i++) com.addCommand(commands[i]);				return Command(com);	}		public function toSTring():String	{		return "[object CommandList]";	}			// イベント		private function _completeHandler(e:CommandEvent):Void	{		Command(e.target).removeAllListeners(true);				// 処理を終了する		_executeFinally(_commandEvent);	}		private function _finallyCompleteHandler(e:CommandEvent):Void	{		Command(e.target).removeAllListeners(true);				// 処理を終了する		_executeFinallyComplete(_commandEvent);	}		private function _catchHandler(e:CommandCatchEvent):Void	{		Command(e.target).removeAllListeners(true);				// イベントを発行する		dispatchEvent(e);	}}