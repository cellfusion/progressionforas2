import mx.utils.Delegate;import jp.progression.commands.proto.Command;import jp.progression.commands.proto.CommandList;import jp.progression.events.CommandCatchEvent;import jp.progression.events.CommandEvent;import jp.progression.events.Event;import jp.progression.events.EventUnit;/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */class jp.progression.commands.ParallelList extends CommandList{	private var _eventUnit:EventUnit;		private var _completeDelegate:Function;	private var _commandProgressDelegate:Function;	private var _catchDelegate:Function;		public function ParallelList(delay:Number, commands:Array) {		super("ParalleList", delay, commands);				_completeDelegate = Delegate.create(this, _completeHandler);		_commandProgressDelegate = Delegate.create(this, _commandProgressHandler);		_catchDelegate = Delegate.create(this, _catchHandler);	}		public function _executeProgress():Void	{		if (commands.length == 0)		{			_executeComplete();			return;		}				_eventUnit = new EventUnit();		_eventUnit.addEventListener(Event.COMPLETE, _completeDelegate);				var l:Number = commands.length;		for (var i : Number = 0; i < l; i++)		{			var com:Command = Command(commands[i]);			com.addEventListener(CommandEvent.COMMAND_PROGRESS, _commandProgressDelegate);			com.addEventListener(CommandCatchEvent.EXCEPTION, _catchDelegate);			com.addEventListener(CommandCatchEvent.EVENT, _catchDelegate);			_eventUnit.addEventUnit(com, CommandEvent.COMMAND_COMPLETE);		}				for (var i:Number = 0; i < l; i++) Command(commands[i]).execute(extra);	}		public function interrupt():Void	{		if (!running) return;				_eventUnit.removeAllListeners();				var l:Number = commands.length;		for (var i:Number = 0; i < l; i++)		{			Command(commands[i]).removeAllListeners();			Command(commands[i]).interrupt();		}				dispatchEvent(new CommandEvent(CommandEvent.COMMAND_INTERRUPT, this));	}		public function clone():Command	{		var com:ParallelList = new ParallelList(delay);				com.enabled = enabled;		com.before(_beforeScope, _beforeFunc, _beforeArgs);		com.after(_afterScope, _afterFunc, _afterArgs);				var l:Number = commands.length;		for (var i:Number = 0; i < l; i++) com.addCommand(commands[i]);				return Command(com);	}		public function toString():String	{		return "[object ParalleList]";	}			private function _completeHandler(e:Event):Void	{		EventUnit(e.target).removeAllListeners();				var l:Number = commands.length		for (var i:Number = 0; i < l; i++) Command(commands[i]).removeAllListeners();				_executeFinally(new CommandEvent(CommandEvent.COMMAND_COMPLETE));	}		private function _commandProgressHandler(e:CommandEvent):Void	{		dispatchEvent(new CommandEvent(CommandEvent.COMMAND_PROGRESS, this));	}		private function _catchHandler(e:CommandCatchEvent):Void	{		EventUnit(e.target).removeAllListeners();				var l:Number = commands.length		for (var i:Number = 0; i < l; i++) Command(commands[i]).removeAllListeners();				_executeCatch(e);	}}