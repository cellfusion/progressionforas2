import mx.events.EventDispatcher;import mx.utils.Delegate;import jp.progression.commands.proto.Command;import jp.progression.events.Event;/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */class jp.progression.commands.FuncCommand extends Command{	public function get func():Function { return _func; }	public function set func(value:Function):Void { _func = value; }	private var _func:Function;		public function get args():Array { return _args; }	public function set args(value:Array):Void { _args = value; }	private var _args:Array;		public function get dispatcher():EventDispatcher { return _dispatcher; }	public function set dispatcher(value:EventDispatcher):Void { _dispatcher = value; }	private var _dispatcher:EventDispatcher;		public function get eventType():String { return _eventType; }	public function set eventType(value:String):Void { _eventType = value; }	private var _eventType:String;		private var _listenerDelegate:Function;		public function FuncCommand(func:Function, args:Array, delay:Number, dispatcher:EventDispatcher, eventType:String) {		super(name, delay);				if (func == undefined) func = null;		if (args == undefined) args = null;		if (delay == undefined) delay = null;		if (dispatcher == undefined) dispatcher = null;		if (eventType == undefined) eventType = null;				this.func = func;		this.args = args;		this.dispatcher = dispatcher;		this.eventType = eventType;				_listenerDelegate = Delegate.create(this, _listenerHandler);	}		private function _executeProgress():Void	{		var hasEvent:Boolean = (dispatcher && eventType) ? true : false;				// イベントが存在すれば登録する		if (hasEvent) {			dispatcher.addEventListener(eventType, _listenerDelegate);		}				func.apply(this, args);				// イベントが存在すれば終了する		if (hasEvent) return;				_executeComplete();	}		private function _interruptProgress():Void	{		// イベントが存在すれば		if (dispatcher && eventType) {			// リスナーを解除する			dispatcher.removeEventListener(eventType, _listenerDelegate);		}				// 停止処理を終了する		_interruptComplete();	}		public function clone():Command	{		var com:Command = new FuncCommand(func, args ? args.concat() : null, delay, dispatcher, eventType);		com.enabled = enabled;		com.before(_beforeScope, _beforeFunc, _beforeArgs);		com.after(_afterScope, _afterFunc, _afterArgs);		return com;	}		public function toString():String	{		return "[object Func]";	}			private function _listenerHandler(e:Event):Void	{		EventDispatcher(e.target).removeEventListener(eventType, _listenerDelegate);				_executeComplete();	}}