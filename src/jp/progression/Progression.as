import jp.progression.errors.ArgumentError;import jp.progression.events.EventIntegrator;import jp.progression.events.ProcessEvent;import jp.progression.managers.SceneManager;import jp.progression.scenes.SceneId;import jp.progression.scenes.SceneObject;import mx.events.EventDispatcher;import mx.utils.Delegate;/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */class jp.progression.Progression extends EventIntegrator{	static public var NAME:String = "Progression for ActionScript 2.0";	static public var VERSION:String = "1.0.0 Alpha";	static public var AUTHOR:String = "Copyright (c) 2007 taka:nium.jp, Mk-10:cellfusion.jp, supported by Spark project.";	static private var _instances:Object = new Object();	static public function get verbose():Boolean 	{ 		return _verbose; 	}	static public function set verbose(b:Boolean):Void 	{ 		_verbose = b; 	}	static private var _verbose:Boolean = false;	private var _sceneManager:SceneManager;	public function get id():String 	{ 		return root.name; 	}	public function get root():SceneObject 	{ 		return _rootScene; 	}	private var _rootScene:SceneObject;	public function get currentSceneId():SceneId 	{ 		return _sceneManager.currentSceneId; 	}	public function get destinedSceneId():SceneId 	{ 		return _sceneManager.destinedSceneId; 	}	public function get eventType():String 	{ 		return _sceneManager.eventType; 	}	public function get stage():MovieClip 	{ 		return _stage; 	}	private var _stage:MovieClip;	public function get container():MovieClip 	{ 		return _container; 	}	private var _container:MovieClip;	public function get current():SceneObject 	{ 		return _sceneManager.current; 	}	public function get lock():Boolean 	{ 		return _sceneManager.lock; 	}	public function set lock(b:Boolean):Void 	{ 		_sceneManager.lock = b; 	}	public function get autoLock():Boolean 	{ 		return _sceneManager.autoLock; 	}	public function set autoLock(b:Boolean):Void 	{ 		_sceneManager.autoLock = b; 	}	public function get running():Boolean 	{ 		return _sceneManager.running; 	}	public function get interrupting():Boolean 	{ 		return _sceneManager.interrupting; 	}	public function get onProcessStart():Function 	{ 		return (__onProcessStart instanceof Function) ? __onProcessStart : _onProcessStart; 	}	public function set onProcessStart(value:Function):Void 	{ 		__onProcessStart = value; 	}	private var __onProcessStart:Function;	private function _onProcessStart():Void 	{	}	public function get onProcessComplete():Function 	{ 		return (__onProcessComplete instanceof Function) ? __onProcessComplete : _onProcessComplete; 	}	public function set onProcessComplete(value:Function):Void 	{ 		__onProcessComplete = value; 	}	private var __onProcessComplete:Function;	private function _onProcessComplete():Void 	{	}	public function get onProcessInterrupt():Function 	{ 		return (__onProcessInterrupt instanceof Function) ? __onProcessInterrupt : _onProcessInterrupt; 	}	public function set onProcessInterrupt(value:Function):Void 	{ 		__onProcessInterrupt = value; 	}	private var __onProcessInterrupt:Function;	private function _onProcessInterrupt():Void 	{	}	public function get onProcessScene():Function 	{ 		return (__onProcessScene instanceof Function) ? __onProcessScene : _onProcessScene; 	}	public function set onProcessScene(value:Function):Void 	{ 		__onProcessScene = value; 	}	private var __onProcessScene:Function;	private function _onProcessScene():Void 	{	}	public function get onProcessEvent():Function 	{ 		return (__onProcessEvent instanceof Function) ? __onProcessEvent : _onProcessEvent; 	}	public function set onProcessEvent(value:Function):Void 	{ 		__onProcessEvent = value; 	}	private var __onProcessEvent:Function;	private function _onProcessEvent():Void 	{	}	public function get onProcessError():Function 	{ 		return (__onProcessError instanceof Function) ? __onProcessError : _onProcessError; 	}	public function set onProcessError(value:Function):Void 	{ 		__onProcessError = value; 	}	private var __onProcessError:Function;	private function _onProcessError():Void 	{	}	/**	 * 	 */	public function Progression(id:String, display:MovieClip)	{				// Progression 識別子が登録されていればエラーを送出する		if (_instances[id]) {			throw new ArgumentError("指定された Progression 識別子は、すでに登録されています。");		}				// パッケージ情報を出力する		trace("\n" + NAME + " - " + VERSION + "\n" + AUTHOR + "\n");				// インスタンスリストに登録する 		_instances[id] = this;				// 引数を保持する		_stage = display._root;		_container = _stage.createEmptyMovieClip("container", _stage.getNextHighestDepth());				// コンテナを作成		//		_container = stage.createEmptyMovieClip(id, stage.getNextHighestDepth());		_rootScene = new SceneObject(id);		_rootScene["setProgression"](this);		_rootScene["setRoot"](_rootScene);		_rootScene["setParent"](_rootScene);				//		SceneManager["_internallyCalled"] = true;		_sceneManager = new SceneManager(_rootScene);		_sceneManager.addExclusivelyEventListener(ProcessEvent.PROCESS_START, Delegate.create(this, _processStart));		_sceneManager.addExclusivelyEventListener(ProcessEvent.PROCESS_COMPLETE, Delegate.create(this, _processComplete));		_sceneManager.addExclusivelyEventListener(ProcessEvent.PROCESS_INTERRUPT, Delegate.create(this, _processInterrupt));		_sceneManager.addExclusivelyEventListener(ProcessEvent.PROCESS_SCENE, Delegate.create(this, _processScene));		_sceneManager.addExclusivelyEventListener(ProcessEvent.PROCESS_EVENT, Delegate.create(this, _processEvent));		_sceneManager.addExclusivelyEventListener(ProcessEvent.PROCESS_ERROR, Delegate.create(this, _processError));	}	/**	 * 指定された Progression 識別子が設定されている Progression インスタンスを返します。	 * @param id 条件となる Progression 識別子です。	 * @return 条件に一致した Progression インスタンスです。	 */	static public function getInstanceById(id:String):Progression	{		return _instances[id];	}	static public function getInstanceBySceneId(sceneId:SceneId):Progression	{		return _instances[sceneId.getNameByIndex(0)];	}	static public function gotoScene(sceneId:SceneId):Void	{		// Progression インスタンスを取得する		var prog:Progression = getInstanceBySceneId(sceneId);				// 存在しなければエラーを送出		if (!prog) {			throw new ArgumentError("指定されたシーン識別子が所属する Progression インスタンスが存在しません。");		}				// 移動する		prog.goto(sceneId);	}	static public function log(message:String, separotorBefore:Boolean):Void	{		if (separotorBefore == undefined) separotorBefore = false;				if (!verbose) return;				if (separotorBefore) trace("\n--------------------------------------------\n");				trace("Progression:" + message);	}	public function goto(sceneId:SceneId):Void	{		_sceneManager.goto(sceneId);	}	public function interrupt():Void	{		_sceneManager.interrupt();	}	public function toString():String	{		return "[object Echelon]";	}	private function _processStart(e:ProcessEvent):Void	{		log(String(destinedSceneId) + " へのシーンの移動を開始します。", true);				dispatchEvent(e);				onProcessStart();	}	private function _processComplete(e:ProcessEvent):Void	{		log("シーンの移動を完了します。\n");				dispatchEvent(e);				onProcessComplete();	}	private function _processInterrupt(e:ProcessEvent):Void	{		log("シーンの移動を停止します。\n");				dispatchEvent(e);				onProcessInterrupt();	}	private function _processScene(e:ProcessEvent):Void	{		log(String(e.scene.sceneId) + " シーンに移動しました。");				dispatchEvent(e);				onProcessScene();	}	private function _processEvent(e:ProcessEvent):Void	{		log(String(e.scene.sceneId) + " シーンの " + e.eventType + " イベントを実行します。");				dispatchEvent(e);				onProcessEvent();	}	private function _processError(e:ProcessEvent):Void	{		log("移動先のシーンが存在しません。");				dispatchEvent(e);				onProcessError();	}}