import mx.events.EventDispatcher;import jp.progression.utils.ArrayUtil;/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */class jp.progression.events.EventIntegrator extends EventDispatcher{	private var _dictionary:Object;		public function EventIntegrator()	{		_dictionary = {};	}		public function addEventListener(type:String, listener:Object):Void	{		removeEventListener(type, listener);				_dictionary[type] = listener;		_dictionary[listener] = type;				super.addEventListener(type, listener);	}		public function addExclusivelyEventListener(type:String, listener:Object):Void	{		removeEventListener(type, listener);				super.addEventListener(type, listener);	}		public function removeEventListener(type:String, listener:Object):Void	{//		if (ArrayUtil.arrayContains(_listeners, {name:eventName, target:listener}))//		{//			var num:Number = ArrayUtil.getItemIndex(_listeners, {name:eventName, target:listener})//			_listeners.splice(num, 1);//		}				delete _dictionary[type];		delete _dictionary[listener];				super.removeEventListener(type, listener);	}		public function hasEventListener(type:String):Boolean	{		return _dictionary[type] instanceof Function;	}		public function removeAllListeners(completely:Boolean):Void	{		if (completely == undefined) completely = false;//		var l:Number = _listeners.length;//		for (var i:Number = 0; i < l; i++)//		{//			removeEventListener(_listeners[i].name, _listeners[i].target);//		}				for (var idx:String in _dictionary) {			if (_dictionary[idx] instanceof Function) {				continue;			}						super.removeEventListener(String(_dictionary[idx]), _dictionary[String(_dictionary[idx])]);		}				_dictionary = new Object();	}		public function restoreRemovedListeners():Void	{		for (var idx:String in _dictionary) {			if (_dictionary[idx] instanceof Function) {				continue;			}						super.removeEventListener(String(_dictionary[idx]), _dictionary[String(_dictionary[idx])]);		}	}		public function toString():String {		return "[object EventIntegrator]";	}}