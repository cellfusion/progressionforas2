import mx.events.EventDispatcher;import mx.utils.Delegate;import jp.progression.events.Event;import jp.progression.events.EventIntegrator;/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */class jp.progression.events.EventUnit extends EventIntegrator {		private var _dictionary:Object;	private var _eventUnitDelegate:Function;		public function EventUnit()	{		// 初期化する		_dictionary = new Object();				_eventUnitDelegate = Delegate.create(this, _eventUnitHandler);	}		public function addEventUnit(target:Object, type:String):Void	{		target.addEventListener(type, _eventUnitDelegate);				if (!_dictionary[target]) _dictionary[target] = new Object();				_dictionary[target][type] = false;	}		public function removeEventUnit(target:Object, type:String):Void	{		target.removeEventListener(type, _eventUnitDelegate);				if (!_dictionary[target]) _dictionary[target] = new Object();				delete _dictionary[target][type];	}		public function reset():Void	{		for (var target:String in _dictionary)		{			for (var type:String in _dictionary[target])			{				_dictionary[target][type] = false;			}		}	}		private function _eventUnitHandler(e:Event):Void	{		_dictionary[e.target][e.type] = true;				for (var target:String in _dictionary)		{			for (var type:String in _dictionary[target])			{				if (!_dictionary[target][type]) return;			}		}				dispatchEvent(new Event(Event.COMPLETE, this));	}}