/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */import jp.progression.utils.StringUtil;class jp.progression.scenes.SceneId {		public function get path():String { return _path; }	private var _path:String;		public function get length():Number { return _path.split("/").length -1; }		public function SceneId(scenePath:String)	{		if (!validate(scenePath)) throw new Error("Error : 指定されたシーンパスの記述が正しくありません。");				_path = scenePath;	}		/**	 * シーンパスの書式が正しいかどうかチェック	 * @param scenePath	 */	static public function validate(scenePath:String):Boolean	{		// /から始まっていない場合はエラー		if (scenePath.charAt(0) != "/") return false;				// シーン名が入っていなかったらエラー		var arr:Array = scenePath.split("/");		for (var i:Number = 1; i < arr.length; i++)		{			if (arr[i] == "") return false;		}		return true;	}		/**	 * @param scenePath	 */	public function transfer(scenePath:String):SceneId	{		if (scenePath.charAt(0) != "/") scenePath = path + "/" + scenePath;				scenePath = StringUtil.replace(scenePath, "/./", "/");				scenePath = StringUtil.parentReplace(scenePath);						return new SceneId(scenePath);	}		public function getNameByIndex(index:Number):String	{		var dirList:Array = path.split("/");		dirList.shift();				if (index < 0) index += dirList.length;		//		trace("getIDByIndex\n\tindex:"+index+"\n\treturn:"+dirList[index]);		return dirList[index];	}		public function slice(length:Number):SceneId	{		length = Math.max(1, length) + 1;				var dirList:Array = path.split("/");		dirList = dirList.splice(0, length);		return new SceneId(dirList.join("/"));	}		/**	 * @param sceneID	 */	public function contains(sceneId:SceneId):Boolean	{		return String(sceneId).indexOf(path) != -1;	}		/**	 * 	 */	public function clone():SceneId	{		return new SceneId(_path);	}		/**	 * @param str	 */	private function parentCheck(str:String):String	{		var num:Number = str.indexOf("/../");				if (num == -1) return null;				var num2:Number = str.lastIndexOf("/", num-1);				str = str.substring(0, num2) + "/" + str.substring(num+4);				var result:String = parentCheck(str);				// / で終わってる場合は / を消去		if (result != null) 		{			if (result.charAt(result.length-1) == "/") result = result.substr(0, result.length-1);		}		else		{			if (str.charAt(str.length-1) == "/") str = str.substr(0, str.length-1);		}				if (result == null) return str;		else return result;	}		public function toString():String	{		return path;	}}