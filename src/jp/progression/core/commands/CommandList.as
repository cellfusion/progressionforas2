import jp.progression.Progression;import jp.progression.core.commands.Command;import jp.progression.events.CommandEvent;import jp.progression.utils.StringUtil;import mx.utils.Delegate;/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */class jp.progression.core.commands.CommandList extends Command{	private var _commands:Array = [];	private var _position:Number = 0;	private var _commandComplete:Function;	public function CommandList(executeFunction:Function, interruptFunction, initObject:Object)	{		super(executeFunction, interruptFunction, initObject);				var commands:Array = [];				// 4番目以降の引数を拾い出す		if (arguments.length >= 4) {			for (var i:Number = 0;i < arguments.length; i++) {				if (i < 4) continue;								commands.push(arguments[i]);			}		}				// initObject が CommandList であれば		if (initObject instanceof CommandList) {			// 特定のプロパティを継承する			var orgin:Array = CommandList(initObject)._commands.slice();			var result:Array = [];			var l:Number = orgin.length;			for (var i:Number = 0;i < l; i++) {				orgin[i] = Command(orgin[i]).clone();			}			commands = orgin;		}				// コマンドリストに登録する		addCommand.apply(null, commands);				_commandComplete = Delegate.create(this, commandComplete);				// イベントリスナーを登録する		addExclusivelyEventListener(CommandEvent.COMMAND_COMPLETE, _commandComplete);	}	/**	 * @param args	 */	public function addCommand():CommandList	{		// 引数が 0 の場合はエラー出して終了		if (arguments.length == 0) {			throw new Error("Command がありません");		}				for (var i:Number = 0;i < arguments.length; i++) {			var cmd:Command = arguments[i] instanceof Command ? arguments[i] : null;						// 存在しなければ次へ			if (!cmd) continue;						_registerCommand(cmd, numCommands);		}				return this;	}	/**	 * @param args	 */	public function insertCommand():CommandList	{		// 引数が 0 の場合はエラー出して終了		if (arguments.length == 0) {			throw new Error("Command がありません");		}				for (var i:Number = 0;i < arguments.length; i++) {			var cmd:Command = arguments[i] instanceof Command ? arguments[i] : null;						// 存在しなければ次へ			if (!cmd) continue;						_registerCommand(cmd, _position + i);		}				return this;	}	public function clearCommand(completely:Boolean):CommandList	{		completely = completely || false;				var commands:Array = _commands.slice();				// 全て、もしくは現在の処理位置以降を削除する		commands = completely ? commands.splice(0) : commands.splice(_position);				// 親子関係を再設定する		for (var i:Number = 0;i < commands.length; i++) {			_unregisterCommand(Command(commands[i]));		}				// 現在のカウントを再設定する		_position = Math.min(_position, numCommands);				return this;	}	public function nextCommand():Command	{		return Command(_commands[_position++]);	}	public function hasNextCommand():Boolean	{		return Boolean(_position < _commands.length);	}	public function reset():Void	{		_position = 0;	}	public function clone():Command	{		return new CommandList(null, null, this);	}	// private function	private function _registerCommand(command:Command, index:Number):Void	{		// 親が設定されていれば解除		if (command._parent) {			command._parent._unregisterCommand(command);		}				// 登録		_commands.splice(index, 0, command);				var next:Command = _commands[index + 1];		var previous:Command = _commands[index - 1];				// 関係を設定する		command["setRoot"](root);		command["setParent"](this);		command["setNext"](next);		command["setPrevious"](previous);				// 深度を設定する		command[setLength](length + 1);				if (next) next["setPrevious"](command);		if (previous) previous["setNext"](command);				command.dispatchEvent(new CommandEvent(CommandEvent.COMMAND_ADDED));	}	private function _unregisterCommand(command:Command):Void	{		var l:Number = _commands.length;		for (var i:Number = 0;i < l; i++) {			var cmd:Command = Command(_commands[i]);						// 違っていれば次へ			if (cmd != command) continue;						var next:Command = _commands[i + 1];			var previous:Command = _commands[i - 1];						command["setRoot"](null);			command["setParent"](null);			command["setNext"](null);			command["setPrevious"](null);						command["setLength"](1);						if (next) next["setPrevious"](previous);			if (previous) previous["setNext"](next);						// 登録を解除する			_commands.splice(i, 1);						command.dispatchEvent(new CommandEvent(CommandEvent.COMMAND_REMOVED));			return;		}	}	// イベント	private function commandComplete(e:CommandEvent):Void	{		Progression.log(_indent + "</" + className + " : " + (id || name) + ">");	}	// getter/setter	public function get commands():Array 	{ 		return _commands.concat(); 	}		public function get numCommands():Number	{		return _commands.length;	}		public function get position():Number	{		return Math.min(_position, numCommands-1);	}	// 隠蔽したい getter/setter	private function getRoot():Command	{		return super.getRoot();	}	private function setRoot(value:Command):Void	{		super.setRoot(value);				// 子の関連性を再設定する		for (var i:Number = 0;i < _commands.length; i++) {			Command(_commands[i]).setRoot(root);		}	}	private function getParent():CommandList	{		return super.getParent();	}	private function setParent(value:CommandList):Void	{		super.setParent(value);				// 子の関連性を再設定する		for (var i:Number = 0;i < _commands.length; i++) {			Command(_commands[i]).setParent(this);		}	}	private function getNext():Command	{		return super.getNext();	}	private function setNext(value:Command):Void	{		super.setNext(value);	}	private function getPrevious():Command	{		return super.getPrevious();	}	private function setPrevious(value:Command):Void	{		super.setPrevious(value);	}		private function getLength():Number	{		return super.getLength();	}		private function setLength(value:Number):Void	{		super.setLength(value);				for (var i:Number = 0; i < _commands.length; i++) {			Command(_commands[i]).setLength(length+1);		}				_indent = StringUtil.repeat("  ", value);	}}