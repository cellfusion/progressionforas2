import jp.progression.core.collections.CommandCollection;import jp.progression.core.commands.CommandList;import jp.progression.events.CommandEvent;import jp.progression.events.EventIntegrator;import jp.progression.events.TimerEvent;import jp.progression.utils.ArrayUtil;import jp.progression.utils.ObjectUtil;import jp.progression.utils.StringUtil;import jp.progression.utils.Timer;import mx.events.EventDispatcher;import mx.utils.Delegate;/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */class jp.progression.core.commands.Command extends EventIntegrator{	private static var _defaultTimeOut:Number = 15000;	private static var _thresholdLength:Number = 200;	private static var __processNum:Number = 0;	private static var _executedCommands:Array = [];		private var _className:String;	private var _name:String;	private var _id:String;	private var _group:String;	private var _root:Command;	private var _parent:CommandList;	private var _next:Command;	private var _previous:Command;	private var _length:Number = 1;	private var _indent:String = "  ";	private var _enabled:Boolean = true;	private var _running:Boolean = false;	private var _interrupting:Boolean = false;	private var _enforcedInterrupting:Boolean = false;	private var _processing:Boolean = false;	private var _delay:Number = 0;	private var _timeOut:Number = 0;	private var _scope:Object;	private var _extra:Object;	private var _latestData:Object;	private var _executeFunction:Function;	private var _interruptFunction:Function;	private var _beforeFunction:Function;	private var _beforeArgs:Array = [];	private var _afterFunction:Function;	private var _afterArgs:Array = [];	private var _errorFunction:Function;	private var _timerDelay:Timer;	private var _timerTimeOut:Timer;	private var _timerCompleteDelay:Function;	private var _timerCompleteTimeOut:Function;	public function Command(executeFunction:Function, interruptFunction:Function, initObject:Object)	{		if (!executeFunction) executeFunction = null;		if (!interruptFunction) interruptFunction = null;		if (!initObject) initObject = null;				// クラス名を取得する		_className = "dummy";				// CommandCollection に登録する		CommandCollection["addInstance"](this);				_executeFunction = executeFunction || executeComplete;		_interruptFunction = interruptFunction || interruptComplete;				// 初期化する		this.name = null;		this.scope = this;		this.timeOut = _defaultTimeOut;		setProperties(initObject);				// initObject が Command であれば		if (initObject instanceof Command) {			var cmd:Command = Command(initObject);						// 特定のプロパティを継承する			_delay = cmd.delay;			_extra = cmd.extra;			_executeFunction = cmd._executeFunction;			_interruptFunction = cmd._interruptFunction;			_beforeFunction = cmd._beforeFunction;			_beforeArgs = cmd._beforeArgs;			_afterFunction = cmd._afterFunction;			_afterArgs = cmd._afterArgs;			_errorFunction = cmd._errorFunction;		}				_timerCompleteTimeOut = Delegate.create(this, timerCompleteTimeOut);		_timerCompleteDelay = Delegate.create(this, timerCompleteDelay);	}		public function getCommandById(id:String):Command	{		return CommandCollection["getInstanceById"](id);	}		public function getCommandByGroup(group:String, sort:Boolean):Array	{		if (!sort) sort = false;		return CommandCollection["getInstanceByGroup"](group, sort);	}		/**	 * 	 */	public function setProperties(props:Object):Command	{		ObjectUtil.setProperties(this, props);		return this;	}	/**	 * コマンドを実行	 */	public function execute(extra:Object):Void	{		if (extra == undefined) extra = null;				// 実行中なら終了		if (_running) return;				_extra = extra ? extra : {};				dispatchEvent(new CommandEvent(CommandEvent.COMMAND_START));				// 処理が終了されていれば		if (!_running) return;				// 無効化されていれば終了する		if (!enabled) {			_running = false;			_processing = false;						dispatchEvent(new CommandEvent(CommandEvent.COMMAND_COMPLETE));			return;		}				// 実行コマンドリストに追加する		if (ArrayUtil.getItemIndex(_executedCommands, this == -1)) {			_executedCommands.push(this);		}				// 限界数以上の処理を実行していれば強制的に遅延させる		if (__processNum > _thresholdLength) {			_delay = Math.max(1, _delay);		}				// 遅延時間の設定が存在しなければ処理を開始する		if (_delay == 0) {			_executeStart();			return;		}				_processing = false;				// Timer を開始する		_timerDelay = new Timer(_delay, 1);		_timerDelay.addEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteDelay);		_timerDelay.start();	}		/**	 * 	 */	private function _executeStart():Void	{//		Progression.log(StringUtil.repeat("  ", _length + 1) + " <" + type + "> コマンドを実行します。");				//処理を開始		_running = true;				// 事前処理を実行する		if (_beforeFunction instanceof Function) {			try {				_beforeFunction.apply(_scope, _beforeArgs);			} catch(e:Error) {				_catchError(this, e);				return;			}		}				// 処理が終了されていれば		if (!_running) return;				// タイムアウトが設定がされていれば		if (_timeOut > 0) {			_timerTimeOut = new Timer(_timeOut, 1);			_timerTimeOut.addEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteTimeOut);			_timerTimeOut.start();		}				// プロセスを追加する		__processNum++;				try {			_executeFunction.apply(_scope);		} catch(e:Error) {			_catchError(this, e);		}				__processNum--;	}	/**	 * 	 */	public function executeComplete():Void	{		// 実行していなければ終了する		if (!_running) return;				if (_timerTimeOut) {			_timerTimeOut.removeEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteTimeOut);			_timerTimeOut = null;		}				// 事後処理を実行する		if (_afterFunction instanceof Function) {			try {				_afterFunction.apply(_scope, _afterArgs);			} catch(e:Error) {				_catchError(this, e);				return;			}		}				// 処理を終了する		_running = false;		_interrupting = false;		_enforcedInterrupting = false;		_processing = false;				// 実行コマンドリストから削除する		_executedCommands.splice(ArrayUtil.getItemIndex(_executedCommands, this), 1);				// イベントを発行		dispatchEvent(new CommandEvent(CommandEvent.COMMAND_COMPLETE));	}	/**	 * コマンド処理を停止	 */	public function interrupt(enforced:Boolean, extra:Object):Void	{		if (!enforced) enforced = false;		if (!extra) extra = {};				// 中断処理中なら終了する		if (_interrupting) return;				// 実行中ではなく、強制中断するのであれば		if (!_running && enforced) {			interruptComplete();			return;		}				// 実行コマンドリストに追加する		if (ArrayUtil.getItemIndex(_executedCommands, this) == -1) {			_executedCommands.push(this);		}				// 中断処理を開始する		_interrupting = true;		_enforcedInterrupting = enforced;				_interruptStart();	}	private function _interruptStart():Void	{//		Progression.log(StringUtil.repeat("  ", _length + 1) + " <" + type + "> コマンドを実行します。");				// 遅延中であれば		if (_timerDelay) {			_timerDelay.removeEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteDelay);			_timerDelay = null;						// 強制中断であれば			if (_enforcedInterrupting) {				interruptComplete();				return;			}		}				// タイムアウト用の Timer が存在すれば		if (_timerTimeOut) {			_timerTimeOut.removeEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteTimeOut);			_timerTimeOut = null;		}				// タイムアウトが設定されていれば		if (_timeOut > 0) {			_timerTimeOut = new Timer(_timeOut, 1);			_timerTimeOut.addEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteTimeOut);			_timerTimeOut.start();				}				try {			_interruptFunction.apply(_scope);		} catch(e:Error) {			_catchError(this, e);		}	}	public function interruptComplete():Void	{		// 中断処理が実行していなければ終了する		if (!_interrupting) return;				// タイムアウト用 Timer が存在すれば		if (_timerTimeOut) {			_timerTimeOut.removeEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteTimeOut);			_timerTimeOut = null;		}				// 強制中断かどうかを保存する		var enforcedInterrupting:Boolean = _enforcedInterrupting;				// 処理を終了する		_running = false;		_interrupting = false;		_enforcedInterrupting = false;		_processing = false;				// 実行コマンドリストから削除する		_executedCommands.splice(ArrayUtil.getItemIndex(_executedCommands, this), 1);				// イベントを送出する		dispatchEvent(new CommandEvent(CommandEvent.COMMAND_INTERRUPT));	}	/**	 * コマンドの実行直前に処理させたい関数を設定します。	 */	public function before(func:Function, args:Array):Command	{		_beforeFunction = func;		_beforeArgs = (args != undefined) ? args.concat([]) : [];		return this;	}	/**	 * コマンドの実行完了直後に処理させたい関数を設定します。	 */	public function after(func:Function, args:Array):Command	{		_afterFunction = func;		_afterArgs = args != undefined ? args.concat([]) : [];		return this;	}	/**	 * コマンドに対してすぐに関数を実行します。	 */	public function apply(func:Function, args:Array):Command	{		func.apply(this, args);		return this;	}		public function listen(type:String, listener:Function):Command	{		addEventListener(type, listener);		return this;	}		public function error(errorFunction:Function):Command	{		_errorFunction = errorFunction;		return this;	}	/**	 * Command オブジェクトのクローンを作成	 */	public function clone():Command	{		return new Command(_executeFunction, _interruptFunction, this);	}		public function toString():String	{		return '[Command id="'+_id+'" name="'+_name+'" group="'+_group+'"]';	}	// private function	private function _catchError(target:Command, error:Error):Void	{		trace("_catchError");				// タイムアウト用 Timer が存在すれば		if (_timerTimeOut) {			_timerTimeOut.removeEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteTimeOut);			_timerTimeOut = null;		}				// エラー関数が登録されていれば		if (_errorFunction instanceof Function) {			_errorFunction.apply(target, [error]);		} else {			// エラーの発生源であれば内容を表示する			if (target == this) {				trace.apply(null, [error]);			}		}				// 問題が解決しなければ		if (target.running) {			// イベントを送出する			dispatchEvent(new CommandEvent(CommandEvent.COMMAND_ERROR));		}	}	// イベント	private function timerCompleteDelay(e:TimerEvent):Void	{		_timerDelay.removeEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteDelay);		_timerDelay = null;				_executeStart();	}		private function timerCompleteTimeOut(e:TimerEvent):Void	{		_timerTimeOut.removeEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteTimeOut);		_timerTimeOut = null;				// エラーを送出する//		_catchError(this, );	}		// static getter/setter		// getter/setter	public static function get defaultTimeOut():Number	{		return _defaultTimeOut;	}		public static function set defaultTimeOut(value:Number):Void	{		_defaultTimeOut = Math.max(0, value);	}		public static function get thresholdLength():Number 	{ 		return _thresholdLength; 	}	public static function set thresholdLength(value:Number):Void 	{ 		_thresholdLength = Math.max(0, value); 	}		public function get className():String	{		return _className;	}		public function get name():String 	{ 		return _name; 	}		public function set name(value:String):Void	{		_name = value || "command_"+CommandCollection["getNumByInstance"](this);	}		public function get id():String	{		return _id;	}		public function set id(value:String):Void	{		_id = CommandCollection["addInstanceAtId"](this, value);	}		public function get group():String	{		return _group;	}		public function set group(value:String):Void	{		_group = CommandCollection["addInstanceAtGroup"](this, value);	}		public function get root():Command	{		return _root || this;	}		public function get parent():CommandList	{		return _parent;	}		public function get next():Command	{		return _next;	}		public function get previous():Command	{		return _previous;	}		public function get length():Number	{		return _length;	}		public function get enabled():Boolean 	{ 		return _enabled; 	}	public function set enabled(value:Boolean):Void 	{ 		_enabled = value; 	}	public function get running():Boolean 	{ 		return _running; 	}	public function get interrupting():Boolean 	{ 		return _interrupting; 	}		public function get enforcedInterrupting():Boolean	{		return _enforcedInterrupting;	}		public function get delay():Number 	{ 		return _delay; 	}	public function set delay(value:Number):Void 	{ 		_delay = Math.max(0, value); 	}		public function get timeOut():Number	{		return _timeOut;	}		public function set timeOut(value:Number):Void	{		_timeOut = Math.max(0, value);				// タイムアウト用 Timer が存在しなければ		if (!_timerTimeOut) return;				// 値が存在していれば		if (value > 0) {			// 再設定			_timerTimeOut.reset();			_timerTimeOut.delay = value;			_timerTimeOut.start();		} else {			_timerTimeOut.removeEventListener(TimerEvent.TIMER_COMPLETE, _timerCompleteTimeOut);			_timerTimeOut = null;		}	}		public function get scope():Object	{		return _scope;	}		public function set scope(value:Object):Void	{		_scope = value || this;	}	public function get extra():Object 	{ 		return _extra; 	}		public function get latestData():Object	{		// データが存在すれば		if (_latestData) return _latestData;				// 前が存在すれば		if (_previous) return _previous.latestData;				// 親が存在すれば		if (_parent) return _parent.latestData;				return null;	}	public function set latestData(value:Object):Void	{		_latestData = value;	}	// 隠蔽したい getter/setter	private function getProcessNum():Number	{		return __processNum;	}	private function setProcessNum(value:Number):Void	{		__processNum = Math.max(0, value);	}		private function getRoot():Command	{		return _root;	}		private function setRoot(value:Command):Void	{		_root = value;	}		private function getParent():CommandList 	{ 		return _parent; 	}	private function setParent(value:CommandList):Void 	{ 		_parent = value; 	}		private function getNext():Command	{		return _next;	}	private function setNext(value:Command):Void	{		_next = value;	}		private function getPrevious():Command	{		return _previous;	}		public function setPrevious(value:Command):Void	{		_previous = value;	}		public function getLength():Number	{		return _length;	}		public function setLength(value:Number):Void	{		_length = value;		_indent = StringUtil.repeat("  ", value);	}}