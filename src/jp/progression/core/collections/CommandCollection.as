/** * @author Mk-10:cellfusion */import jp.progression.core.commands.Command;class jp.progression.core.collections.CommandCollection {	private static var _instances:Object = {};	private static var _numInstances:Number = 0;	private static var _nums:Object = {};	private static var _ids:Object = {};	private static var _groups:Object = {};		public function CommandCollection() 	{	}		private static function addInstance(instance:Command):Void	{		_instances[_numInstances] = instance;		_nums[instance] = _numInstances++;	}		private static function addInstanceAtId(instance:Command, id:String):String	{		id = id || "";				var oldInstance:Command = Command(_ids[id]);				// 既存の設定が存在すれば削除する		if (oldInstance) {			oldInstance.id = "";			delete _ids[id];		}				// 旧設定を削除する		delete _ids[instance.id];				// 新しい設定を行う		if (id != "") {			_ids[id] = instance;		}				return id;	}		private static function addInstanceAtGroup(instance:Command, group:String):String	{		group = group || "";				var groups:Array = _groups[group] instanceof Array ? _groups[group] : null;				// 既存の設定があれば削除する		if (groups) {			var l:Number = groups.length;			for (var i:Number = 0; i < l; i++) {				 // 違っていれば次へ				 if (groups[i] != instance) continue;				 				 instance.group = "";				 groups.slice(i, 1);				 				 break;			}		}				// 新しい設定を行う		if (group != "") {			// 配列が存在しなければ作成する			if (!_groups[group]) {				_groups[group] = [];			}						groups = _groups[group];						// 登録する			groups.push(instance);		} else {			groups = _groups[instance.group];						l = groups.length;			for (var i:Number = 0; i < l; i++) {				// 違っていれば次へ				if (groups[i] != instance) continue;								groups.splice(i, 1);				instance.group = "";				break;			}		}				return group;	}		private function getNumByInstance(instance:Command):Number	{		return Number(_nums[instance]);	}		private function getInstanceByGroup(group:String, sort:Boolean):Array	{		sort = sort || false;				var groups:Array = _groups[group] instanceof Array ? _groups[group] : null;		groups = groups ? groups.slice() : [];				if (sort) {			groups.sortOn(["id", "name", "group"]);		}				return groups;	}}