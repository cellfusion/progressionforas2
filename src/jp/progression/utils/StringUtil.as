/** *  * Progression for ActionScript 2.0 *  * @author	Copyright (c) 2007 Mk-10:cellfusion.jp, supported by Spark project. * @version	1.0.0 Alpha *  * @see		http://progression.jp/ * @see		http://usage.progression.jp/ * @see		http://progression.libspark.org/ *  * @see		http://cellfusion.jp/ * @see		http://www.libspark.org/ *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, * either express or implied. See the License for the specific language * governing permissions and limitations under the License. *  */class jp.progression.utils.StringUtil {	public static function toProperType(str:String, priority:Boolean):Object	{		if (priority == undefined) priority = true;				// Number型に変換する		var num:Number = parseFloat(str);				// モードが true なら		if (priority) {			// 数値化を優先する			if (!isNaN(num)) return num;		} else {			// 元データの維持を優先する			if (num.toString() == str) return num;		}				// グローバル定数、プライマリ式キーワードで返す		switch(str) {			case "true" : 				return true;			case "false" : 				return false;			case "null" : 				return null;			case "undefined" : 				return undefined;			case "Infinity" : 				return Infinity;			case "-Infinity" : 				return -Infinity;			case "NaN" : 				return NaN;		}				return str;	}	public static function repeat(str:String, count:Number):String	{		if (count == undefined) count = 0;				var result:String = str;		count = Math.max(0, count);		for (var i:Number = 0;i < count; i++) {			result += str;		}		return result;	}	public static function toUpperCaseFirstLetter(str:String):String	{		return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();	}	public static function camelize(str:String):String	{		var words:Array = str.split(" ");		var l:Number = words.length;		for (var i:Number = 0;i < l; i++) {			words[i] = toUpperCaseFirstLetter(words[i]);		}		return words.join("");	}	//	public static function decamelize(str:String, separater:String):String//	{//		if (separater == undefined) separater = " ";//		//		//	}}